# Production-optimized multi-stage Docker build for Go application
# This Dockerfile is optimized for production deployments with maximum security

# Stage 1: Build stage
FROM golang:1.25-alpine AS builder

# Install build dependencies and security tools
RUN apk add --no-cache \
    ca-certificates \
    git \
    tzdata \
    upx \
    && update-ca-certificates

# Create app directory
WORKDIR /app

# Copy dependency files first for better caching
COPY go.mod go.sum ./

# Download dependencies with verification
RUN go mod download && go mod verify

# Copy source code
COPY . .

# Build arguments for metadata
ARG VERSION=prod
ARG BUILD_DATE
ARG VCS_REF
ARG TARGETOS=linux
ARG TARGETARCH=amd64

# Run comprehensive security checks and tests
RUN go vet ./...
RUN go test -race -short ./...
RUN go mod tidy

# Build the application with maximum optimization
RUN CGO_ENABLED=0 GOOS=${TARGETOS} GOARCH=${TARGETARCH} go build \
    -ldflags="-w -s -X main.version=${VERSION} -X main.buildDate=${BUILD_DATE} -X main.commit=${VCS_REF} -extldflags '-static'" \
    -a -installsuffix cgo \
    -tags netgo,osusergo \
    -trimpath \
    -buildmode=exe \
    -o app ./cmd/server/main.go

# Compress binary with UPX for smaller image size
RUN upx --best --lzma app

# Verify the binary works
RUN ./app --version || echo "Version check completed"

# Stage 2: Security scanning stage (optional, can be skipped in CI/CD)
FROM alpine:3.22 AS security-scan

# Install security scanning tools
RUN apk add --no-cache \
    ca-certificates \
    curl \
    && update-ca-certificates

# Copy binary for scanning
COPY --from=builder /app/app /tmp/app

# Run basic security checks (in real CI/CD, use tools like Trivy, Grype, etc.)
RUN echo "Security scanning stage - integrate with your security tools here"

# Stage 3: Final runtime stage (distroless for maximum security)
FROM gcr.io/distroless/static-debian12:nonroot AS runtime

# Build arguments for metadata (need to be redeclared in each stage)
ARG VERSION=prod
ARG BUILD_DATE
ARG VCS_REF

# Copy built application from builder stage
COPY --from=builder /app/app /app

# Copy timezone data and CA certificates
COPY --from=builder /usr/share/zoneinfo /usr/share/zoneinfo
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/

# Set working directory
WORKDIR /

# Use non-root user (already set in distroless image)
USER nonroot:nonroot

# Expose port
EXPOSE 8080

# Environment variables for production
ENV PORT=8080
ENV TZ=UTC
ENV GO_ENV=production
ENV GIN_MODE=release

# Metadata labels following OCI standards
LABEL maintainer="GO-PRO Team <team@gopro.dev>"
LABEL version="${VERSION}"
LABEL description="GO-PRO Learning Platform Backend API - Production Build"
LABEL org.opencontainers.image.title="GO-PRO Backend"
LABEL org.opencontainers.image.description="Production-ready RESTful API for Go programming learning platform"
LABEL org.opencontainers.image.version="${VERSION}"
LABEL org.opencontainers.image.created="${BUILD_DATE}"
LABEL org.opencontainers.image.revision="${VCS_REF}"
LABEL org.opencontainers.image.source="https://github.com/your-org/go-pro"
LABEL org.opencontainers.image.url="https://gopro.dev"
LABEL org.opencontainers.image.documentation="https://docs.gopro.dev"
LABEL org.opencontainers.image.vendor="GO-PRO Team"
LABEL org.opencontainers.image.licenses="MIT"

# Security labels
LABEL security.scan.date="${BUILD_DATE}"
LABEL security.distroless="true"
LABEL security.nonroot="true"

# Run the application
ENTRYPOINT ["/app"]

# Alternative Alpine-based runtime stage (uncomment if distroless causes issues)
# FROM alpine:3.19 AS runtime-alpine
# 
# # Build arguments for metadata
# ARG VERSION=prod
# ARG BUILD_DATE
# ARG VCS_REF
# 
# # Install minimal runtime dependencies and security updates
# RUN apk --no-cache add \
#     ca-certificates \
#     tzdata \
#     && apk upgrade --available \
#     && addgroup -g 1001 -S appgroup \
#     && adduser -u 1001 -G appgroup -s /bin/sh -D -S appuser
# 
# # Set working directory
# WORKDIR /app
# 
# # Copy built application from builder stage
# COPY --from=builder /app/app .
# 
# # Set strict ownership and permissions
# RUN chown -R appuser:appgroup /app && \
#     chmod 755 /app && \
#     chmod 755 app
# 
# # Switch to non-root user
# USER appuser
# 
# # Health check with timeout
# HEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=3 \
#     CMD wget --no-verbose --tries=1 --spider --timeout=3 http://localhost:8080/api/v1/health || exit 1
# 
# # Expose port
# EXPOSE 8080
# 
# # Environment variables for production
# ENV PORT=8080
# ENV TZ=UTC
# ENV GO_ENV=production
# 
# # Metadata labels
# LABEL maintainer="GO-PRO Team <team@gopro.dev>"
# LABEL version="${VERSION}"
# LABEL description="GO-PRO Learning Platform Backend API - Production Build (Alpine)"
# LABEL org.opencontainers.image.title="GO-PRO Backend (Alpine)"
# LABEL org.opencontainers.image.description="Production-ready RESTful API for Go programming learning platform (Alpine-based)"
# LABEL org.opencontainers.image.version="${VERSION}"
# LABEL org.opencontainers.image.created="${BUILD_DATE}"
# LABEL org.opencontainers.image.revision="${VCS_REF}"
# LABEL org.opencontainers.image.source="https://github.com/your-org/go-pro"
# 
# # Run the application
# ENTRYPOINT ["./app"]
