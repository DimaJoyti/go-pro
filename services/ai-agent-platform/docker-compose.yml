version: '3.8'

services:
  # PostgreSQL with pgvector extension
  postgres:
    image: ankane/pgvector:latest
    container_name: finagent-postgres
    environment:
      POSTGRES_USER: finagent
      POSTGRES_PASSWORD: finagent_password
      POSTGRES_DB: finagent
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U finagent"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - finagent-network

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: finagent-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - finagent-network

  # Qdrant vector database (optional)
  qdrant:
    image: qdrant/qdrant:latest
    container_name: finagent-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      QDRANT__SERVICE__GRPC_PORT: 6334
    networks:
      - finagent-network

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: finagent-jaeger
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector
      - "14250:14250"
      - "9411:9411"
    environment:
      COLLECTOR_ZIPKIN_HOST_PORT: ":9411"
    networks:
      - finagent-network

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: finagent-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - finagent-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: finagent-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./configs/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - finagent-network

  # AI Agent Platform
  agent-platform:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: finagent-platform
    ports:
      - "8080:8080"
    environment:
      - DATABASE_URL=postgresql://finagent:finagent_password@postgres:5432/finagent?sslmode=disable
      - REDIS_URL=redis://redis:6379/0
      - VECTOR_STORE_URL=postgresql://finagent:finagent_password@postgres:5432/finagent?sslmode=disable
      - QDRANT_URL=http://qdrant:6333
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - APP_ENV=production
      - LOG_LEVEL=info
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      jaeger:
        condition: service_started
    networks:
      - finagent-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  qdrant_data:
  prometheus_data:
  grafana_data:

networks:
  finagent-network:
    driver: bridge

