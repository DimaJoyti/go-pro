# Secrets for GO-PRO application
# Note: In production, these should be created using external secret management systems
# like AWS Secrets Manager, HashiCorp Vault, or Kubernetes External Secrets Operator

apiVersion: v1
kind: Secret
metadata:
  name: go-pro-backend-secrets
  namespace: go-pro
  labels:
    app: go-pro-backend
    component: secrets
type: Opaque
data:
  # Database credentials (base64 encoded)
  # These are example values - replace with actual secrets in production
  DB_PASSWORD: cG9zdGdyZXNfcGFzc3dvcmQ=  # postgres_password
  DB_USER: Z29wcm9fdXNlcg==              # gopro_user
  
  # Redis credentials
  REDIS_PASSWORD: cmVkaXNfcGFzc3dvcmQ=    # redis_password
  
  # JWT secrets
  JWT_SECRET: anlXVF9zZWNyZXRfa2V5XzEyMzQ1Njc4OTA=  # jWT_secret_key_1234567890
  JWT_REFRESH_SECRET: anlXVF9yZWZyZXNoX3NlY3JldF9rZXlfMTIzNDU2Nzg5MA==  # jWT_refresh_secret_key_1234567890
  
  # API keys
  API_KEY: YXBpX2tleV8xMjM0NTY3ODkw          # api_key_1234567890
  WEBHOOK_SECRET: d2ViaG9va19zZWNyZXRfMTIzNDU2Nzg5MA==  # webhook_secret_1234567890
  
  # Encryption keys
  ENCRYPTION_KEY: ZW5jcnlwdGlvbl9rZXlfMTIzNDU2Nzg5MDEyMzQ1Njc4OTA=  # encryption_key_12345678901234567890
  
  # External service credentials
  SMTP_PASSWORD: c210cF9wYXNzd29yZA==      # smtp_password
  OAUTH_CLIENT_SECRET: b2F1dGhfY2xpZW50X3NlY3JldA==  # oauth_client_secret

---
apiVersion: v1
kind: Secret
metadata:
  name: go-pro-postgres-secrets
  namespace: go-pro
  labels:
    app: postgres
    component: secrets
type: Opaque
data:
  # PostgreSQL credentials
  POSTGRES_PASSWORD: cG9zdGdyZXNfcGFzc3dvcmQ=  # postgres_password
  POSTGRES_USER: Z29wcm9fdXNlcg==              # gopro_user
  
  # Replication credentials (if using replication)
  POSTGRES_REPLICATION_USER: cmVwbGljYXRvcg==    # replicator
  POSTGRES_REPLICATION_PASSWORD: cmVwbGljYXRvcl9wYXNzd29yZA==  # replicator_password

---
apiVersion: v1
kind: Secret
metadata:
  name: go-pro-redis-secrets
  namespace: go-pro
  labels:
    app: redis
    component: secrets
type: Opaque
data:
  # Redis credentials
  REDIS_PASSWORD: cmVkaXNfcGFzc3dvcmQ=    # redis_password
  
  # Redis AUTH password
  redis-password: cmVkaXNfcGFzc3dvcmQ=    # redis_password

---
apiVersion: v1
kind: Secret
metadata:
  name: go-pro-tls-secrets
  namespace: go-pro
  labels:
    app: go-pro
    component: tls
type: kubernetes.io/tls
data:
  # TLS certificate and key (base64 encoded)
  # These should be replaced with actual certificates in production
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCi4uLgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCi4uLgotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0t

---
apiVersion: v1
kind: Secret
metadata:
  name: go-pro-monitoring-secrets
  namespace: go-pro
  labels:
    app: monitoring
    component: secrets
type: Opaque
data:
  # Grafana admin credentials
  GRAFANA_ADMIN_PASSWORD: Z3JhZmFuYV9hZG1pbl9wYXNzd29yZA==  # grafana_admin_password
  
  # Prometheus basic auth (if enabled)
  PROMETHEUS_USERNAME: cHJvbWV0aGV1cw==      # prometheus
  PROMETHEUS_PASSWORD: cHJvbWV0aGV1c19wYXNzd29yZA==  # prometheus_password
  
  # Alertmanager secrets
  ALERTMANAGER_USERNAME: YWxlcnRtYW5hZ2Vy  # alertmanager
  ALERTMANAGER_PASSWORD: YWxlcnRtYW5hZ2VyX3Bhc3N3b3Jk  # alertmanager_password
  
  # Slack webhook for alerts
  SLACK_WEBHOOK_URL: aHR0cHM6Ly9ob29rcy5zbGFjay5jb20vc2VydmljZXMvLi4u  # https://hooks.slack.com/services/...

---
apiVersion: v1
kind: Secret
metadata:
  name: go-pro-kafka-secrets
  namespace: go-pro
  labels:
    app: kafka
    component: secrets
type: Opaque
data:
  # Kafka SASL credentials (if using SASL authentication)
  KAFKA_SASL_USERNAME: a2Fma2FfdXNlcg==      # kafka_user
  KAFKA_SASL_PASSWORD: a2Fma2FfcGFzc3dvcmQ=  # kafka_password
  
  # Kafka SSL keystore and truststore passwords (if using SSL)
  KAFKA_SSL_KEYSTORE_PASSWORD: a2V5c3RvcmVfcGFzc3dvcmQ=      # keystore_password
  KAFKA_SSL_TRUSTSTORE_PASSWORD: dHJ1c3RzdG9yZV9wYXNzd29yZA==  # truststore_password
  KAFKA_SSL_KEY_PASSWORD: a2V5X3Bhc3N3b3Jk                    # key_password

---
# External Secrets Operator example (if using ESO)
# This would replace the above secrets in production
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: go-pro-secret-store
  namespace: go-pro
spec:
  provider:
    aws:
      service: SecretsManager
      region: us-west-2
      auth:
        jwt:
          serviceAccountRef:
            name: go-pro-external-secrets-sa

---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: go-pro-backend-external-secrets
  namespace: go-pro
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: go-pro-secret-store
    kind: SecretStore
  target:
    name: go-pro-backend-secrets
    creationPolicy: Owner
  data:
    - secretKey: DB_PASSWORD
      remoteRef:
        key: go-pro/database
        property: password
    - secretKey: REDIS_PASSWORD
      remoteRef:
        key: go-pro/redis
        property: password
    - secretKey: JWT_SECRET
      remoteRef:
        key: go-pro/jwt
        property: secret
    - secretKey: API_KEY
      remoteRef:
        key: go-pro/api
        property: key

---
# Sealed Secrets example (if using Sealed Secrets)
# This would be generated by kubeseal command
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: go-pro-sealed-secrets
  namespace: go-pro
spec:
  encryptedData:
    DB_PASSWORD: AgBy3i4OJSWK+PiTySYZZA9rO43cGDEQAx...
    REDIS_PASSWORD: AgBy3i4OJSWK+PiTySYZZA9rO43cGDEQAx...
    JWT_SECRET: AgBy3i4OJSWK+PiTySYZZA9rO43cGDEQAx...
  template:
    metadata:
      name: go-pro-sealed-secrets
      namespace: go-pro
    type: Opaque

---
# Service Account for External Secrets
apiVersion: v1
kind: ServiceAccount
metadata:
  name: go-pro-external-secrets-sa
  namespace: go-pro
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT-ID:role/go-pro-external-secrets-role

---
# RBAC for External Secrets Service Account
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: go-pro
  name: go-pro-external-secrets-role
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "create", "update", "patch", "delete"]
- apiGroups: ["external-secrets.io"]
  resources: ["externalsecrets", "secretstores"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: go-pro-external-secrets-binding
  namespace: go-pro
subjects:
- kind: ServiceAccount
  name: go-pro-external-secrets-sa
  namespace: go-pro
roleRef:
  kind: Role
  name: go-pro-external-secrets-role
  apiGroup: rbac.authorization.k8s.io
