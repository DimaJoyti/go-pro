# ConfigMaps for GO-PRO application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: go-pro-backend-config
  namespace: go-pro
  labels:
    app: go-pro-backend
    component: config
    version: v1.0.0
data:
  # Application configuration
  GO_ENV: "production"
  PORT: "8080"
  LOG_LEVEL: "info"
  LOG_FORMAT: "json"
  
  # Database configuration
  DB_HOST: "postgres-service"
  DB_PORT: "5432"
  DB_NAME: "gopro_prod"
  DB_SSLMODE: "require"
  DB_MAX_OPEN_CONNS: "25"
  DB_MAX_IDLE_CONNS: "10"
  DB_CONN_MAX_LIFETIME: "1h"
  DB_CONN_MAX_IDLE_TIME: "30m"
  
  # Redis configuration
  REDIS_HOST: "redis-service"
  REDIS_PORT: "6379"
  REDIS_DB: "0"
  REDIS_POOL_SIZE: "10"
  REDIS_MIN_IDLE_CONNS: "5"
  REDIS_MAX_RETRIES: "3"
  REDIS_DIAL_TIMEOUT: "5s"
  REDIS_READ_TIMEOUT: "3s"
  REDIS_WRITE_TIMEOUT: "3s"
  REDIS_POOL_TIMEOUT: "4s"
  REDIS_IDLE_TIMEOUT: "5m"
  REDIS_PREFIX: "gopro:"
  
  # Cache configuration
  REDIS_SESSION_PREFIX: "session:"
  REDIS_LOCK_PREFIX: "lock:"
  REDIS_RATELIMIT_PREFIX: "ratelimit:"
  SESSION_DEFAULT_EXPIRATION: "24h"
  LOCK_DEFAULT_TIMEOUT: "30s"
  
  # Kafka configuration
  KAFKA_BROKERS: "kafka-service:9092"
  MESSAGING_ENABLED: "true"
  KAFKA_CONSUMER_GROUP: "go-pro-backend"
  KAFKA_AUTO_OFFSET_RESET: "earliest"
  KAFKA_ENABLE_AUTO_COMMIT: "true"
  KAFKA_AUTO_COMMIT_INTERVAL: "1s"
  
  # Monitoring configuration
  METRICS_ENABLED: "true"
  METRICS_PORT: "9090"
  TRACING_ENABLED: "true"
  JAEGER_ENDPOINT: "http://jaeger-collector:14268/api/traces"
  OTEL_SERVICE_NAME: "go-pro-backend"
  OTEL_SERVICE_VERSION: "v1.0.0"
  
  # Security configuration
  CORS_ALLOWED_ORIGINS: "*"
  CORS_ALLOWED_METHODS: "GET,POST,PUT,DELETE,OPTIONS"
  CORS_ALLOWED_HEADERS: "Content-Type,Authorization,X-Requested-With"
  RATE_LIMIT_ENABLED: "true"
  RATE_LIMIT_REQUESTS: "100"
  RATE_LIMIT_WINDOW: "1m"
  
  # Health check configuration
  HEALTH_CHECK_INTERVAL: "30s"
  HEALTH_CHECK_TIMEOUT: "10s"
  READINESS_CHECK_INTERVAL: "10s"
  LIVENESS_CHECK_INTERVAL: "30s"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: go-pro-postgres-config
  namespace: go-pro
  labels:
    app: postgres
    component: config
data:
  POSTGRES_DB: "gopro_prod"
  POSTGRES_USER: "gopro_user"
  PGDATA: "/var/lib/postgresql/data/pgdata"
  
  # PostgreSQL performance tuning
  shared_buffers: "256MB"
  effective_cache_size: "1GB"
  maintenance_work_mem: "64MB"
  checkpoint_completion_target: "0.9"
  wal_buffers: "16MB"
  default_statistics_target: "100"
  random_page_cost: "1.1"
  effective_io_concurrency: "200"
  work_mem: "4MB"
  min_wal_size: "1GB"
  max_wal_size: "4GB"
  max_worker_processes: "8"
  max_parallel_workers_per_gather: "2"
  max_parallel_workers: "8"
  max_parallel_maintenance_workers: "2"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: go-pro-redis-config
  namespace: go-pro
  labels:
    app: redis
    component: config
data:
  redis.conf: |
    # Redis configuration for GO-PRO production
    bind 0.0.0.0
    port 6379
    protected-mode yes
    tcp-backlog 511
    tcp-keepalive 300
    timeout 300
    
    # Memory management
    maxmemory 512mb
    maxmemory-policy allkeys-lru
    maxmemory-samples 5
    
    # Persistence
    save 900 1
    save 300 10
    save 60 10000
    appendonly yes
    appendfsync everysec
    
    # Security
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    rename-command DEBUG ""
    
    # Performance
    io-threads 4
    io-threads-do-reads yes
    
    # Logging
    loglevel notice
    
    # Client limits
    maxclients 10000
    
    # Slow log
    slowlog-log-slower-than 10000
    slowlog-max-len 128

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: go-pro-nginx-config
  namespace: go-pro
  labels:
    app: nginx
    component: config
data:
  nginx.conf: |
    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log warn;
    pid /var/run/nginx.pid;
    
    events {
        worker_connections 1024;
        use epoll;
        multi_accept on;
    }
    
    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        
        # Logging
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';
        access_log /var/log/nginx/access.log main;
        
        # Performance
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        
        # Gzip compression
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;
        
        # Rate limiting
        limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
        limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;
        
        # Upstream backend
        upstream backend {
            least_conn;
            server go-pro-backend-service:8080 max_fails=3 fail_timeout=30s;
            keepalive 32;
        }
        
        server {
            listen 80;
            server_name _;
            
            # Security headers
            add_header X-Frame-Options DENY;
            add_header X-Content-Type-Options nosniff;
            add_header X-XSS-Protection "1; mode=block";
            add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
            
            # API routes
            location /api/ {
                limit_req zone=api burst=20 nodelay;
                proxy_pass http://backend;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_connect_timeout 30s;
                proxy_send_timeout 30s;
                proxy_read_timeout 30s;
            }
            
            # Health check
            location /health {
                proxy_pass http://backend/api/v1/health;
                access_log off;
            }
            
            # Metrics (internal only)
            location /metrics {
                allow 10.0.0.0/8;
                allow 172.16.0.0/12;
                allow 192.168.0.0/16;
                deny all;
                proxy_pass http://backend/metrics;
            }
        }
    }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: go-pro-monitoring-config
  namespace: go-pro
  labels:
    app: monitoring
    component: config
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
    
    rule_files:
      - "alert_rules.yml"
    
    alerting:
      alertmanagers:
        - static_configs:
            - targets:
              - alertmanager:9093
    
    scrape_configs:
      - job_name: 'go-pro-backend'
        static_configs:
          - targets: ['go-pro-backend-service:9090']
        metrics_path: /metrics
        scrape_interval: 15s
        
      - job_name: 'postgres'
        static_configs:
          - targets: ['postgres-exporter:9187']
        scrape_interval: 30s
        
      - job_name: 'redis'
        static_configs:
          - targets: ['redis-exporter:9121']
        scrape_interval: 30s
        
      - job_name: 'nginx'
        static_configs:
          - targets: ['nginx-exporter:9113']
        scrape_interval: 30s
        
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name

  alert_rules.yml: |
    groups:
      - name: go-pro-alerts
        rules:
          - alert: HighErrorRate
            expr: rate(http_requests_total{status=~"5.."}[5m]) > 0.1
            for: 5m
            labels:
              severity: critical
            annotations:
              summary: "High error rate detected"
              description: "Error rate is {{ $value }} errors per second"
              
          - alert: HighLatency
            expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m])) > 0.5
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "High latency detected"
              description: "95th percentile latency is {{ $value }} seconds"
              
          - alert: DatabaseDown
            expr: up{job="postgres"} == 0
            for: 1m
            labels:
              severity: critical
            annotations:
              summary: "Database is down"
              description: "PostgreSQL database is not responding"
              
          - alert: RedisDown
            expr: up{job="redis"} == 0
            for: 1m
            labels:
              severity: critical
            annotations:
              summary: "Redis is down"
              description: "Redis cache is not responding"
