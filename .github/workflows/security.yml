name: Security Scanning

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  # CodeQL Analysis
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: ['go', 'javascript']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"

  # Dependency scanning
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate

  # Secret scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  # Container image scanning
  container-scan:
    name: Container Image Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image:
          - backend
          - api-gateway
          - user-service
          - course-service
          - progress-service
          - frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build image
        run: |
          if [ -d "${{ matrix.image }}" ]; then
            docker build -t ${{ matrix.image }}:test ./${{ matrix.image }}
          elif [ -d "services/${{ matrix.image }}" ]; then
            docker build -t ${{ matrix.image }}:test ./services/${{ matrix.image }}
          fi

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ matrix.image }}:test
          format: 'sarif'
          output: 'trivy-results-${{ matrix.image }}.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results-${{ matrix.image }}.sarif'
          category: 'trivy-${{ matrix.image }}'

  # SAST scanning
  semgrep:
    name: Semgrep SAST
    runs-on: ubuntu-latest
    container:
      image: returntocorp/semgrep
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Semgrep
        run: semgrep ci --sarif --output=semgrep.sarif
        env:
          SEMGREP_RULES: >-
            p/security-audit
            p/golang
            p/javascript
            p/typescript
            p/react
            p/nextjs

      - name: Upload Semgrep results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif

  # License compliance
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check Go licenses
        run: |
          go install github.com/google/go-licenses@latest
          cd backend
          go-licenses check ./... --disallowed_types=forbidden,restricted

      - name: Check npm licenses
        run: |
          cd frontend
          npm install -g license-checker
          license-checker --production --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC'

  # SBOM generation
  sbom:
    name: Generate SBOM
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate SBOM for Backend
        uses: anchore/sbom-action@v0
        with:
          path: ./backend
          artifact-name: sbom-backend.spdx.json
          output-file: ./sbom-backend.spdx.json
          format: spdx-json

      - name: Generate SBOM for Frontend
        uses: anchore/sbom-action@v0
        with:
          path: ./frontend
          artifact-name: sbom-frontend.spdx.json
          output-file: ./sbom-frontend.spdx.json
          format: spdx-json

      - name: Upload SBOMs
        uses: actions/upload-artifact@v4
        with:
          name: sboms
          path: |
            ./sbom-backend.spdx.json
            ./sbom-frontend.spdx.json

  # Security scorecard
  scorecard:
    name: OpenSSF Scorecard
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      id-token: write
      contents: read
      actions: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Run analysis
        uses: ossf/scorecard-action@v2.3.1
        with:
          results_file: results.sarif
          results_format: sarif
          publish_results: true

      - name: Upload results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

  # Notify security team
  notify:
    name: Notify Security Team
    runs-on: ubuntu-latest
    needs: [codeql, secret-scan, container-scan, semgrep]
    if: failure()
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: 'failure'
          text: 'Security scan failed - please review'
          webhook_url: ${{ secrets.SLACK_SECURITY_WEBHOOK }}

      - name: Create GitHub issue
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Security Scan Failed',
              body: 'Automated security scan detected issues. Please review the workflow run.',
              labels: ['security', 'automated']
            })

