name: Microservices CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - 'services/**'
      - '.github/workflows/microservices-ci.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'services/**'
      - '.github/workflows/microservices-ci.yml'

env:
  GO_VERSION: '1.22'
  DOCKER_REGISTRY: ghcr.io

jobs:
  # Detect changed services
  detect-changes:
    name: Detect Changed Services
    runs-on: ubuntu-latest
    outputs:
      api-gateway: ${{ steps.filter.outputs.api-gateway }}
      user-service: ${{ steps.filter.outputs.user-service }}
      course-service: ${{ steps.filter.outputs.course-service }}
      progress-service: ${{ steps.filter.outputs.progress-service }}
      shared: ${{ steps.filter.outputs.shared }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            api-gateway:
              - 'services/api-gateway/**'
            user-service:
              - 'services/user-service/**'
            course-service:
              - 'services/course-service/**'
            progress-service:
              - 'services/progress-service/**'
            shared:
              - 'services/shared/**'

  # Lint and test shared libraries
  shared-quality:
    name: Shared Libraries Quality
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.shared == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Lint shared libraries
        run: |
          cd services/shared
          go fmt ./...
          go vet ./...

      - name: Test shared libraries
        run: |
          cd services/shared
          go test -v -race -coverprofile=coverage.out ./...

  # API Gateway CI
  api-gateway-ci:
    name: API Gateway CI
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.api-gateway == 'true' || needs.detect-changes.outputs.shared == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Download dependencies
        run: |
          cd services/api-gateway
          go mod download

      - name: Lint
        run: |
          cd services/api-gateway
          go fmt ./...
          go vet ./...

      - name: Run tests
        run: |
          cd services/api-gateway
          go test -v -race -coverprofile=coverage.out ./...

      - name: Build
        run: |
          cd services/api-gateway
          go build -o api-gateway ./cmd/main.go

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./services/api-gateway
          file: ./services/api-gateway/Dockerfile
          push: false
          tags: api-gateway:test

  # User Service CI
  user-service-ci:
    name: User Service CI
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.user-service == 'true' || needs.detect-changes.outputs.shared == 'true'
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: gopro
          POSTGRES_PASSWORD: gopro_password
          POSTGRES_DB: gopro_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Download dependencies
        run: |
          cd services/user-service
          go mod download

      - name: Lint
        run: |
          cd services/user-service
          go fmt ./...
          go vet ./...

      - name: Run tests
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: gopro
          DB_PASSWORD: gopro_password
          DB_NAME: gopro_test
          REDIS_URL: localhost:6379
        run: |
          cd services/user-service
          go test -v -race -coverprofile=coverage.out ./...

  # Course Service CI
  course-service-ci:
    name: Course Service CI
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.course-service == 'true' || needs.detect-changes.outputs.shared == 'true'
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: gopro
          POSTGRES_PASSWORD: gopro_password
          POSTGRES_DB: gopro_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Download dependencies
        run: |
          cd services/course-service
          go mod download

      - name: Lint
        run: |
          cd services/course-service
          go fmt ./...
          go vet ./...

      - name: Run tests
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: gopro
          DB_PASSWORD: gopro_password
          DB_NAME: gopro_test
          REDIS_URL: localhost:6379
        run: |
          cd services/course-service
          go test -v -race -coverprofile=coverage.out ./...

  # Progress Service CI
  progress-service-ci:
    name: Progress Service CI
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.progress-service == 'true' || needs.detect-changes.outputs.shared == 'true'
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: gopro
          POSTGRES_PASSWORD: gopro_password
          POSTGRES_DB: gopro_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Download dependencies
        run: |
          cd services/progress-service
          go mod download

      - name: Lint
        run: |
          cd services/progress-service
          go fmt ./...
          go vet ./...

      - name: Run tests
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: gopro
          DB_PASSWORD: gopro_password
          DB_NAME: gopro_test
          REDIS_URL: localhost:6379
        run: |
          cd services/progress-service
          go test -v -race -coverprofile=coverage.out ./...

  # Build and push all service images
  build-images:
    name: Build Service Images
    runs-on: ubuntu-latest
    needs: [api-gateway-ci, user-service-ci, course-service-ci, progress-service-ci]
    if: |
      always() &&
      (needs.api-gateway-ci.result == 'success' || needs.api-gateway-ci.result == 'skipped') &&
      (needs.user-service-ci.result == 'success' || needs.user-service-ci.result == 'skipped') &&
      (needs.course-service-ci.result == 'success' || needs.course-service-ci.result == 'skipped') &&
      (needs.progress-service-ci.result == 'success' || needs.progress-service-ci.result == 'skipped')
    strategy:
      matrix:
        service: [api-gateway, user-service, course-service, progress-service]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./services/${{ matrix.service }}
          file: ./services/${{ matrix.service }}/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

